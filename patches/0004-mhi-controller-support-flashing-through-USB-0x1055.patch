From ac8e0bbe498d7d103cda13962fe6933629f56346 Mon Sep 17 00:00:00 2001
From: Daniele Palmas <dnlplm@gmail.com>
Date: Tue, 6 Sep 2022 13:32:16 +0200
Subject: [PATCH 04/17] mhi: controller: support flashing through USB 0x1055

Add a new controller file to be used when flashing through USB (composition 0x1055)
in order to make the mhi stack aware of the process and not to reset the function.

Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
---
 drivers/bus/mhi/host/init.c        | 27 +++++++++++++++++++++++++++
 drivers/bus/mhi/host/pci_generic.c | 10 ++++++++--
 drivers/net/wwan/mhi_wwan_ctrl.c   |  2 +-
 include/linux/mhi.h                | 17 +++++++++++++++--
 4 files changed, 51 insertions(+), 5 deletions(-)

diff --git a/drivers/bus/mhi/host/init.c b/drivers/bus/mhi/host/init.c
index 04fbccff65ac..9ca7339dfe56 100644
--- a/drivers/bus/mhi/host/init.c
+++ b/drivers/bus/mhi/host/init.c
@@ -79,6 +79,32 @@ const char *to_mhi_pm_state_str(u32 state)
 	return mhi_pm_state_str[index];
 }
 
+static ssize_t fw_update_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct mhi_device *mhi_dev = to_mhi_device(dev);
+	struct mhi_controller *mhi_cntrl = mhi_dev->mhi_cntrl;
+
+	return sprintf(buf, "%u\n", mhi_cntrl->xfp);
+}
+
+static ssize_t fw_update_store(struct device *dev,  struct device_attribute *attr, const char *buf, size_t len)
+{
+	struct mhi_device *mhi_dev = to_mhi_device(dev);
+	struct mhi_controller *mhi_cntrl = mhi_dev->mhi_cntrl;
+	bool enable;
+
+	if (strtobool(buf, &enable))
+		return -EINVAL;
+
+	if (enable)
+		mhi_cntrl->xfp = XFP_STATE_FLASHING;
+	else
+		mhi_cntrl->xfp = XFP_STATE_NEED_RESET;
+
+	return len;
+}
+static DEVICE_ATTR_RW(fw_update);
+
 static ssize_t serial_number_show(struct device *dev,
 				  struct device_attribute *attr,
 				  char *buf)
@@ -124,6 +150,7 @@ static struct attribute *mhi_dev_attrs[] = {
 	&dev_attr_serial_number.attr,
 	&dev_attr_oem_pk_hash.attr,
 	&dev_attr_soc_reset.attr,
+	&dev_attr_fw_update.attr,
 	NULL,
 };
 ATTRIBUTE_GROUPS(mhi_dev);
diff --git a/drivers/bus/mhi/host/pci_generic.c b/drivers/bus/mhi/host/pci_generic.c
index a962a1984ee2..317c149abdba 100644
--- a/drivers/bus/mhi/host/pci_generic.c
+++ b/drivers/bus/mhi/host/pci_generic.c
@@ -825,8 +825,14 @@ static void health_check(struct timer_list *t)
 			test_bit(MHI_PCI_DEV_SUSPENDED, &mhi_pdev->status))
 		return;
 
-	if (mhi_cntrl->xfp_reset == 1) {
-		mhi_cntrl->xfp_reset = 0;
+	if (mhi_cntrl->xfp == XFP_STATE_FLASHING) {
+		/* Flashing through USB, wait until users notifies that it has finished */
+		mod_timer(&mhi_pdev->health_check_timer, jiffies + HEALTH_CHECK_PERIOD);
+		return;
+	}
+
+	if (mhi_cntrl->xfp == XFP_STATE_NEED_RESET) {
+		mhi_cntrl->xfp = XFP_STATE_IDLE;
 		dev_dbg(mhi_cntrl->cntrl_dev, "Device needs to be resetted EE = %d\n", mhi_cntrl->ee);
 		queue_work(system_long_wq, &mhi_pdev->recovery_work);
 		return;
diff --git a/drivers/net/wwan/mhi_wwan_ctrl.c b/drivers/net/wwan/mhi_wwan_ctrl.c
index 0f3b09be6e7f..1c7f6d6f77e7 100644
--- a/drivers/net/wwan/mhi_wwan_ctrl.c
+++ b/drivers/net/wwan/mhi_wwan_ctrl.c
@@ -142,7 +142,7 @@ static void mhi_wwan_ctrl_stop(struct wwan_port *port)
 
 	/* Check to detect if the modem has finished flashing and is resetting */
 	if (wwan_port_get_type(port) == WWAN_PORT_QCDM && cntrl->ee == MHI_EE_SBL)
-		cntrl->xfp_reset = 1;
+		cntrl->xfp = XFP_STATE_NEED_RESET;
 }
 
 static int mhi_wwan_ctrl_tx(struct wwan_port *port, struct sk_buff *skb)
diff --git a/include/linux/mhi.h b/include/linux/mhi.h
index f5f5ca8e09c0..bb78d38ce1f1 100644
--- a/include/linux/mhi.h
+++ b/include/linux/mhi.h
@@ -286,6 +286,18 @@ struct mhi_controller_config {
 	bool m2_no_db;
 };
 
+/**
+ * enum xfp_state - xfp flashing state
+ * @XFP_STATE_IDLE: not flashing
+ * @XFP_STATE_FLASHING: flashing
+ * @XFP_STATE_NEED_RESET: mhi stack needs to be resetted
+ */
+enum xfp_state {
+	XFP_STATE_IDLE = 0x0,
+	XFP_STATE_FLASHING = 0x1,
+	XFP_STATE_NEED_RESET = 0x2,
+};
+
 /**
  * struct mhi_controller - Master MHI controller structure
  * @cntrl_dev: Pointer to the struct device of physical bus acting as the MHI
@@ -357,6 +369,7 @@ struct mhi_controller_config {
  * @fbc_download: MHI host needs to do complete image transfer (optional)
  * @wake_set: Device wakeup set flag
  * @irq_flags: irq flags passed to request_irq (optional)
+ * @xfp: xfp state used for flashing
  * @mru: the default MRU for the MHI device
  *
  * Fields marked as (required) need to be populated by the controller driver
@@ -452,8 +465,8 @@ struct mhi_controller {
 	bool wake_set;
 	unsigned long irq_flags;
 	u32 mru;
-	/* Flag to detect reset after xfp flashing  */
-	bool xfp_reset;
+	/* Flag to manage flashing status  */
+	enum xfp_state xfp;
 	/* Flag to detect forced SBL */
 	bool forced_SBL;
 };
-- 
2.43.2

